/*
* UtilityBelt - a starter kit for any SASS project
* By @dmtintner & @hackingui
* Documentation and examples - hackingui.com/front-end/10-best-scss-utilities/
* V1.1.0
*/

@mixin noise() {
    position: absolute;
    left:0;
    top:0;
    height:100%;
    background: url(../img/noise.gif);
    @media (-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-device-pixel-ratio: 1.5), (min-resolution: 144dpi) {
        background: url(../img/noise.png);
    }
    content: "";
    width: 100%;
    box-shadow: inset 0 0 200px black;
    opacity: 0.40;
    background-size: 160px 120px;
}

// placeholder style
@mixin placeholder {
  &::-webkit-input-placeholder {@content}
  &:-moz-placeholder           {@content}
  &::-moz-placeholder          {@content}
  &:-ms-input-placeholder      {@content}  
}
// usage:
//input { @include placeholder {
//    font-family: $base-font-family;
//    color: red;
//}}


// transparent BG including IEs 
@mixin transparent($color, $alpha) {
  $rgba: rgba($color, $alpha); 
  $ie-hex-str: ie-hex-str($rgba);
  background-color: transparent;
  background-color: $rgba;
  // Sass transforme lui-même le rgba en hexadécimal pour IE
  filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$ie-hex-str},endColorstr=#{$ie-hex-str}); 
  zoom: 1;
}


/*
## Triangle
* @include triangle within a pseudo element and add positioning properties (ie. top, left)
* $direction: up, down, left, right
*/
@mixin triangle($direction, $size: 8px, $color: #222){
  content: '';
  display: block;
  position: absolute;
  height: 0; width: 0;
  @if ($direction == 'up'){
    border-bottom: $size solid $color;
    border-left: $size solid transparent;
    border-right: $size solid transparent;
  }
  @else if ($direction == 'down'){
    border-top: $size solid $color;
    border-left: $size solid transparent;
    border-right: $size solid transparent;
  }
  @else if ($direction == 'left'){
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
  }
  @else if ($direction == 'right'){
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
  }
}

/*
* Currency
*/
%currency {
  position: relative;
  &:before {
    content: '$';
    position: relative;
    left: 0;
  }
}
.USD %currency:before { content: '$'; }
.EUR %currency:before { content: '\20AC'; } // must escape the html entities for each currency symbol
.ILS %currency:before { content: '\20AA'; }
.GBP %currency:before { content: '\00A3'; }

/*
* Clearfix
*/
%clearfix {
  *zoom: 1;
  &:after {
    content: '';
    display: table;
    line-height: 0;
    clear: both;
  }
}

/*
* Respond To
*/
// Breakpoints for each query
$smartphone: 480px;
$tabletPortrait: 767px;
$tabletLandscape: 1024px;
$desktop: 1174px;
$largeScreen: 1400px;
@mixin respondTo($media) {
  @if $media == smartphone {
    @media (max-width: $smartphone) { @content; }
  }
  @else if $media == tablet {
    @media (min-width: $tabletPortrait) and (max-width: $tabletLandscape) { @content; }
  }
  @else if $media == smallScreen {
    @media (max-width: $desktop) { @content; }
  }
  @else if $media == desktop {
    @media (min-width: $desktop) { @content; }
  }
}

/*
* Ghost Vertical Align
*/
@mixin ghostVerticalAlign($pseudoEl: before){
  &:#{$pseudoEl} {
    content: '';
    display: inline-block;
    vertical-align: middle;
    height: 100%; width: .1px;
  }
}
%vertical-align {
  @include ghostVerticalAlign();
}

/*
* Truncate Text
*/
@mixin truncateText($overflow: ellipsis){
  overflow: hidden;
  white-space: nowrap;
  text-overflow: $overflow; // values are: clip, ellipsis, or a string
}

/*
* Animation
*/
@mixin animation($name, $duration: 1000ms, $iterations: infinite, $timing-function: ease, $delay: 0ms) {
  // There is a FF bug that requires all time values to have units, even 0 !!!!!!
  -webkit-animation: $name $duration $iterations $timing-function $delay;
  -moz-animation: $name $duration $iterations $timing-function $delay;
  -o-animation: $name $duration $iterations $timing-function $delay;
  animation: $name $duration $iterations $timing-function $delay;
}


/*
* Resize Sprite - for resizing only a single image from a sprite
*
* params: $map = $<name>-sprites (ex. $icon-sprites)
*         $sprite = file name w/o file type ending (ex. globe)
          $percent = number (ex. 50)
*
* (if compass CSS3 mixins not included, uncomment the background-size row and comment the @include version)
*/
@mixin resize-sprite($map, $sprite, $percent) {
  $spritePath:    sprite-path($map);
  $spriteWidth:   image-width($spritePath);
  $spriteHeight:  image-height($spritePath);
  $width: image-width(sprite-file($map, $sprite));
  $height: image-height(sprite-file($map, $sprite));
  @include background-size(ceil($spriteWidth * ($percent/100)) ceil($spriteHeight * ($percent/100)));
  //  background-size: $spriteWidth * ($percent/100)) $spriteHeight * ($percent/100);
  width: ceil($width*($percent/100));
  height: ceil($height*($percent/100));
  background-position: 0 floor(nth(sprite-position($map, $sprite), 2)  * ($percent/100) );
}
/*
* Resizes all images in a given sprite
* mixin courtesy of Wilker Lúcio https://gist.github.com/wilkerlucio/6442309
* params: $only = if you want to list specific files instead of regenerating every image (ex. globe, checkmark)
*/
@mixin resize-sprite-set($map, $percent, $only...) {
  $name: sprite_map_name($map);

  @each $sprite in sprite_names($map) {
    @if length($only) == 0 or index($only, $sprite) != false {
      .#{$name}-#{$sprite} {
        @include resize-sprite($map, $sprite, $percent);
      }
    }
  }
}

/*
* HUI Tooltips
*/
@mixin hui_tooltip($content: attr(data-tooltip), $direction: top) {
  position: relative;
  &:before, &:after {
    display: none;
    z-index: 98;
  }
  &:hover {
    &:after { // for text bubble
      content: $content;
      display: block;
      position: absolute;
      padding: 3px 6px;
      font-size: 12px;
      white-space: nowrap;
      color: #fff;
      text-shadow: 1px 1px #000;
      background-color: #222;
    }
    @if ($direction == 'top'){
      &:before {
        @include triangle(down, 6px, #222);
        top: -2px; margin-top: 0;
        left: 47%;
      }
      &:after {
        top: -28px;
        left: 47%; margin-left: -20px;
      }
    }
    @else if ($direction == 'bottom'){
      &:before {
        @include triangle(up, 6px, #222);
        top: auto; margin-top: 0;
        bottom: -2px;
        left: 47%;
      }
      &:after {
        bottom: -28px;
        left: 47%; margin-left: -20px;
      }
    }
  }
}


/*
## Text-align justify
For perfectly aligned grids that don't rely on floating elements and difficult calculations

- http://www.barrelny.com/blog/text-align-justify-and-rwd/ */
%justify {
  text-align: justify;
  &:after { // adds a false last line to the content so justify is applied
    content: '';
    display: inline-block;
    width: 100%;
  }
}
